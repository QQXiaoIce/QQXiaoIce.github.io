<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>赛博清单 Vol-02</title>
    <link href="/cyber-checklist-vol-02/"/>
    <url>/cyber-checklist-vol-02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近在B站看up主<a href="https://space.bilibili.com/67079745">玄离199</a>的视频，又发现了不少有意思的工具。作为“赛博清单”系列的第二期，这次整理了几个非常实用的网络和桌面工具，以及一个有趣的“摸鱼”神器</p><span id="more"></span><hr><h3 id="Traynard-窗口托盘化工具"><a href="#Traynard-窗口托盘化工具" class="headerlink" title="Traynard - 窗口托盘化工具"></a>Traynard - 窗口托盘化工具</h3><p>Traynard 是一款能将任意窗口最小化到系统托盘的 Windows 桌面工具。它是对经典工具 Traymond 的功能增强和启发，对于喜欢保持任务栏整洁的用户来说非常实用。</p><p><strong>主要功能：</strong></p><ul><li><strong>中文界面</strong>：对国内用户更友好。</li><li><strong>开机自启</strong>：设置一次，无需手动运行。</li><li><strong>自定义热键</strong>：可以根据自己的习惯设置快捷键。</li><li><strong>多种最小化方式</strong>：支持通过图标或右键菜单操作。</li><li><strong>快速还原</strong>：可以方便地还原最后一个窗口或唤出窗口列表。</li><li><strong>自动规则</strong>：可自定义规则，让特定程序启动后自动最小化到托盘。</li></ul><p><strong>安装:</strong></p><ul><li>从 <a href="https://github.com/tabris17/traymond/releases/latest">GitHub Releases</a> 页面下载可执行文件直接运行。</li><li>使用 Scoop 安装:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop install https://github.com/tabris17/traymond/releases/latest/download/traymond.json<br></code></pre></td></tr></table></figure></li></ul><p><strong>Github地址</strong>：<a href="https://github.com/KKJack-He/traynard">https://github.com/KKJack-He/traynard</a></p><hr><h3 id="SmartDNS-本地DNS服务器"><a href="#SmartDNS-本地DNS服务器" class="headerlink" title="SmartDNS - 本地DNS服务器"></a>SmartDNS - 本地DNS服务器</h3><p>SmartDNS 是一个运行在本地的高性能 DNS 服务器。它的核心功能是从多个上游 DNS 服务器获取解析结果，然后将其中访问速度最快的 IP 返回给客户端，从而有效提高网络访问速度，减少延迟。</p><p><strong>核心优势:</strong></p><ul><li><strong>智能优选，提升网速</strong>：与传统DNS返回第一个查询结果不同，SmartDNS会并发请求多个上游DNS服务器，并智能分析返回结果，最终将<strong>访问速度最快</strong>的IP地址返回给客户端，显著降低网络延迟。</li><li><strong>高效过滤，净化网络</strong>：支持自定义域名IP地址，通过高性匹配，可以有效拦截广告、追踪等污染性域名，达到广告过滤的效果。</li><li><strong>多协议支持，保障隐私</strong>：全面支持 <code>DOT (DNS over TLS)</code>、<code>DOH (DNS over HTTPS)</code>、<code>DOQ (DNS over QUIC)</code> 等加密DNS协议，有效防止DNS污染和劫持，保护个人隐私。</li><li><strong>跨平台兼容，部署灵活</strong>：完美支持在OpenWrt、华硕路由器、树莓派及Windows等多种设备和操作系统上部署，满足不同用户的需求。</li></ul><p><strong>使用指导:</strong></p><ul><li>SmartDNS官网：<a href="https://pymumu.github.io/smartdns">https://pymumu.github.io/smartdns</a></li><li>Github地址：<a href="https://github.com/pymumu/smartdns">https://github.com/pymumu/smartdns</a></li></ul><hr><h3 id="genact-无意义代码生成器"><a href="#genact-无意义代码生成器" class="headerlink" title="genact - 无意义代码生成器"></a>genact - 无意义代码生成器</h3><p>这是一个非常有意思的“摸鱼”神器。在你需要假装很忙时，运行它就对了。<code>genact</code> 可以在你的终端里模拟各种看起来非常“高大上”的任务，比如编译内核、下载机密文件、区块链挖矿等等，让路过的人以为你正在进行着什么了不起的工作。</p><blockquote><p>官方介绍：在你本该认真工作的时候，用它来假装很忙或者正在等待电脑响应！用你那疯狂的多任务处理技巧给别人留下深刻印象。只需打开几个 genact 实例，好戏就开始了。genact 有多个场景，可以假装在做一些激动人心或有用的事情，但实际上什么都没发生。</p></blockquote><p><strong>Github地址</strong>：<a href="https://github.com/svenstaro/genact">https://github.com/svenstaro/genact</a></p><hr><h3 id="VNT-虚拟局域网组网工具"><a href="#VNT-虚拟局域网组网工具" class="headerlink" title="VNT - 虚拟局域网组网工具"></a>VNT - 虚拟局域网组网工具</h3><p>VNT 是一个简单、高效的虚拟局域网（Virtual Local Area Network）工具。它可以帮助你在不同的网络环境下，快速地将多台设备组成一个虚拟的局域网，让它们之间可以像在同一个路由器下一样互相访问。对于远程办公、个人NAS访问、联机游戏等场景非常有用。</p><blockquote><p>🚀 An efficient VPN</p><p>🚀 一个简单、高效、能快速组建虚拟局域网的工具</p></blockquote><p><strong>Github地址</strong>：<a href="https://github.com/vnt-dev/vnt">https://github.com/vnt-dev/vnt</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>软件分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>效率工具</tag>
      
      <tag>开源软件</tag>
      
      <tag>Windows</tag>
      
      <tag>网络工具</tag>
      
      <tag>摸鱼神器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>赛博清单 Vol.01</title>
    <link href="/cyber-checklist-vol-01/"/>
    <url>/cyber-checklist-vol-01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近在B站看up主<a href="https://space.bilibili.com/67079745">玄离199</a>的视频，发现了不少有用的工具，于是决定开一个新系列“赛博清单”，专门用来存放那些我觉得不错、值得备忘的软件和网站，这是第一期。</p><span id="more"></span><hr><h3 id="ZyperWin-轻量级Windows优化工具"><a href="#ZyperWin-轻量级Windows优化工具" class="headerlink" title="ZyperWin++ - 轻量级Windows优化工具"></a>ZyperWin++ - 轻量级Windows优化工具</h3><p>这是一款轻量、开源、免费的Windows优化工具。它的功能非常全面，从系统性能、服务项优化到垃圾清理、右键菜单管理都覆盖了。此外，它还集成了系统激活和Office快速安装部署的功能，对于重装系统后的快速配置来说相当方便。界面简洁，操作逻辑清晰，并且兼容Win7到最新的Win11系统。</p><p>GitHub地址：<a href="https://github.com/ZyperWave/ZyperWinOptimize">https://github.com/ZyperWave/ZyperWinOptimize</a></p><hr><h3 id="BookmarkHub-浏览器书签跨平台同步插件"><a href="#BookmarkHub-浏览器书签跨平台同步插件" class="headerlink" title="BookmarkHub - 浏览器书签跨平台同步插件"></a>BookmarkHub - 浏览器书签跨平台同步插件</h3><p>BookmarkHub 是一款解决浏览器书签跨平台同步问题的插件。如果你同时使用 Chrome、Firefox、Edge 等多款浏览器，或者在不同设备间同步书签，这个工具就非常实用。</p><p>它的亮点在于无需注册额外的账号，直接利用你自己的 GitHub 账户生成一个 Token 和一个私有的 Gist 来作为书签的云端存储仓库，数据掌握在自己手里，非常安全放心。通过插件可以一键上传和下载书签，轻松实现同步。</p><p>GitHub地址：<a href="https://github.com/dudor/BookmarkHub">https://github.com/dudor/BookmarkHub</a></p><hr><h3 id="dupeGuru-强大的重复文件查找工具"><a href="#dupeGuru-强大的重复文件查找工具" class="headerlink" title="dupeGuru - 强大的重复文件查找工具"></a>dupeGuru - 强大的重复文件查找工具</h3><p>dupeGuru 是一款非常强大的重复文件查找工具，跨平台支持 Windows、macOS 和 Linux。</p><p>它最核心的优势是拥有一个快速模糊匹配算法，不仅能通过文件内容查找完全相同的文件，还能扫描文件名，找出那些名字相似但不完全一样的重复文件。此外，它还有两个特别实用的模式：</p><p>音乐模式：可以扫描音频文件的标签（如歌手、专辑），找出重复的音乐收藏。</p><p>图片模式：通过模糊扫描图片内容，找出视觉上相似但不完全相同的图片。</p><p>其官方 GitHub 上的英文原文介绍如下：</p><blockquote><p>dupeGuru is a tool to find duplicate files on your computer. It can scan either filenames or contents. The filename scan features a fuzzy matching algorithm that can find duplicate filenames even when they are not exactly the same.</p></blockquote><p>Github地址：<a href="https://github.com/arsenetar/dupeguru">https://github.com/arsenetar/dupeguru</a></p><hr><h3 id="anto-简洁的桌面端字幕翻译工具"><a href="#anto-简洁的桌面端字幕翻译工具" class="headerlink" title="anto - 简洁的桌面端字幕翻译工具"></a>anto - 简洁的桌面端字幕翻译工具</h3><p>anto 是一个开源的桌面端字幕翻译工具，界面简洁。对于有翻译视频字幕需求的用户来说非常方便。</p><p>它集成了多种主流的机器翻译服务，如科大讯飞、微软翻译、DeepL、火山翻译等，可以根据需要选择不同的引擎。支持拖拽 <code>.srt</code> 等格式的字幕文件进行处理，并且在翻译后会自动在文件名中增加引擎简写后缀，便于管理。</p><p>Github地址：<a href="https://github.com/speauty/anto">https://github.com/speauty/anto</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>软件分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>效率工具</tag>
      
      <tag>开源软件</tag>
      
      <tag>Windows</tag>
      
      <tag>浏览器插件</tag>
      
      <tag>文件管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QQ音乐广告泛滥？试试这个纯净版本</title>
    <link href="/qq-music-ad-free-version/"/>
    <url>/qq-music-ad-free-version/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近QQ音乐的客户端真是让人头疼，花钱开了<strong>豪华绿钻</strong>，本以为能安安静静地听歌，结果广告却越来越多。开屏广告、弹窗广告，简直防不胜防。虽然可以用<strong>GKD</strong>之类的工具跳过，但作为付费用户，这种体验实在让人无法接受。交钱就是为了支持正版的同时获得更好的体验，如果会员也无法免除广告，那真的会让人萌生退意。</p><span id="more"></span><h3 id="告别广告，回归纯净听歌体验"><a href="#告别广告，回归纯净听歌体验" class="headerlink" title="告别广告，回归纯净听歌体验"></a>告别广告，回归纯净听歌体验</h3><p>其实，除了官方的版本，我们还有更好的选择。市面上有一些<strong>定制版</strong>的QQ音乐客户端，它们通常更纯粹，没有那么多广告。</p><p>目前，比较受欢迎的定制版主要有<strong>小米定制版</strong>和<strong>魅族定制版</strong>。</p><ul><li><strong>小米定制版：</strong> 曾经也是纯净版的好选择，但现在也已经开始接入广告了，所以不再是首选。</li><li><strong>魅族定制版：</strong> 相对于小米版，<strong>魅族定制版</strong>目前仍保持着相对纯净的体验，是现阶段更合适的替代方案。它不仅没有烦人的开屏广告，也不会有各种弹窗，能让你真正沉浸在音乐世界里。</li></ul><h3 id="如何获取魅族定制版？"><a href="#如何获取魅族定制版？" class="headerlink" title="如何获取魅族定制版？"></a>如何获取魅族定制版？</h3><ul><li><strong>123云盘：</strong> <a href="https://www.123912.com/s/vdvrVv-qj38h?pwd=3hAB#">下载链接</a> 提取码：<strong>3hAB</strong></li><li><strong>百度网盘：</strong> <a href="https://pan.baidu.com/s/1sOlOZxH8kxqIhE7TGVx_bQ?pwd=1yp7">下载链接</a> 提取码：<strong>1yp7</strong></li></ul><p>选择一个你习惯的网盘下载即可。安装后，你会发现界面简洁了许多，没有了那些多余的干扰，找回了最初听音乐的乐趣。</p><p>这些版本或许会在不远的未来失效，或者随着更新越来越臃肿，但届时再讨论对应的解决方案吧</p><hr>]]></content>
    
    
    <categories>
      
      <category>软件分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QQ音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 pip 安装慢的问题：国内镜像源加速指南</title>
    <link href="/pip-slow-fix-china-mirrors-guide/"/>
    <url>/pip-slow-fix-china-mirrors-guide/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="问题的根源：为什么-pip-下载慢？"><a href="#问题的根源：为什么-pip-下载慢？" class="headerlink" title="问题的根源：为什么 pip 下载慢？"></a>问题的根源：为什么 pip 下载慢？</h3><p>在使用 <code>pip</code> 安装 Python 包时，总会感觉下载速度特别慢，有时候甚至会因为网络超时而安装失败。究其原因，主要是因为 <code>pip</code> 默认的官方源服务器在国外，国内访问自然就慢了。为了解决这个问题，最直接有效的办法就是把下载源切换到国内的镜像服务器。</p><p>这里记录一下两种设置 <code>pip</code> 镜像源的方法：一种是临时的，一种是永久的。</p><span id="more"></span><hr><h3 id="方法一：临时使用镜像源"><a href="#方法一：临时使用镜像源" class="headerlink" title="方法一：临时使用镜像源"></a>方法一：临时使用镜像源</h3><p>如果只是偶尔想给某个包装个速，或者在别人的环境上临时操作一下，用这个方法最方便。它不会修改 <code>pip</code> 的默认配置，只需要在安装命令后面加上 <code>-i</code> 或 <code>--index-url</code> 参数，指定本次安装使用的镜像源地址就行。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>比如，我想用清华大学的镜像源来安装 <code>requests</code> 这个包，命令就可以这么写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install requests -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><h4 id="常用国内镜像源"><a href="#常用国内镜像源" class="headerlink" title="常用国内镜像源"></a>常用国内镜像源</h4><p>下面整理了几个常用的国内镜像地址，可以根据自己的网络情况选择：</p><ul><li><strong>清华大学：</strong> <code>https://pypi.tuna.tsinghua.edu.cn/simple/</code></li><li><strong>阿里云：</strong> <code>https://mirrors.aliyun.com/pypi/simple/</code></li><li><strong>豆瓣：</strong> <code>https://pypi.doubanio.com/simple/</code></li><li><strong>中国科学技术大学：</strong> <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></li></ul><hr><h3 id="方法二：永久配置镜像源"><a href="#方法二：永久配置镜像源" class="headerlink" title="方法二：永久配置镜像源"></a>方法二：永久配置镜像源</h3><p>每次安装都手动加参数还是太麻烦了，对于自己的开发环境，我更倾向于一劳永逸的解决方案——直接修改配置文件，让 <code>pip</code> 默认就使用国内镜像源。</p><h4 id="1-找到配置文件路径"><a href="#1-找到配置文件路径" class="headerlink" title="1. 找到配置文件路径"></a>1. 找到配置文件路径</h4><p><code>pip</code> 的配置文件位置根据操作系统的不同而不同：</p><ul><li><strong>Windows:</strong> 在文件资源管理器的地址栏输入 <code>%APPDATA%\pip</code>，然后在这个文件夹里创建一个 <code>pip.ini</code> 文件。</li><li><strong>macOS &#x2F; Linux:</strong> 配置文件路径是 <code>~/.config/pip/pip.conf</code>。如果 <code>~/.config/pip</code> 目录或 <code>pip.conf</code> 文件不存在，需要手动创建。</li></ul><h4 id="2-修改或创建配置文件"><a href="#2-修改或创建配置文件" class="headerlink" title="2. 修改或创建配置文件"></a>2. 修改或创建配置文件</h4><p>用文本编辑器打开这个配置文件（没有就新建一个），然后把下面的内容粘贴进去。这里还是以清华大学的源为例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><h4 id="3-保存并验证"><a href="#3-保存并验证" class="headerlink" title="3. 保存并验证"></a>3. 保存并验证</h4><p>保存文件后，这个配置就永久生效了。之后再使用 <code>pip install</code> 命令安装任何包，都会自动从配置好的国内镜像源下载，速度会快非常多。</p><p>可以随便装个小包测试一下效果，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">pip install numpy<br></code></pre></td></tr></table></figure><p>如果看到下载速度有质的飞跃，那就说明配置成功了。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>临时使用：</strong> 适合在临时环境或者偶尔需要加速的场景，命令简单直接。</li><li><strong>永久配置：</strong> 自己的开发环境首选，一次配置，后续所有安装都会加速，能极大提升效率。</li></ul><p>通过这两种方法，基本上就能告别 <code>pip</code> 下载慢的烦恼了。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pip</tag>
      
      <tag>国内镜像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于MeingJS在Hexo中插入音乐的方法</title>
    <link href="/meingjs-hexo-audio-plugin/"/>
    <url>/meingjs-hexo-audio-plugin/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="在Hexo博客中添加音乐播放器-hexo-tag-aplayer使用指南"><a href="#在Hexo博客中添加音乐播放器-hexo-tag-aplayer使用指南" class="headerlink" title="在Hexo博客中添加音乐播放器 - hexo-tag-aplayer使用指南"></a>在Hexo博客中添加音乐播放器 - hexo-tag-aplayer使用指南</h3><p>为什么会有这一期呢？那自然是因为想着做一点音乐分享的文章，说是分享，更多来说算是收藏才对</p><span id="more"></span><hr><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>首先需要安装hexo-tag-aplayer插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-tag-aplayer<br></code></pre></td></tr></table></figure><h4 id="配置启用"><a href="#配置启用" class="headerlink" title="配置启用"></a>配置启用</h4><p>在Hexo的配置文件<code>_config.yml</code>中添加以下配置以启用Meting功能：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">aplayer:</span><br>  <span class="hljs-attr">meting:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>在Markdown文件中使用以下标签语法插入音乐：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% meting &quot;音乐ID&quot; &quot;平台&quot; &quot;类型&quot; %&#125;<br></code></pre></td></tr></table></figure><h4 id="实用示例"><a href="#实用示例" class="headerlink" title="实用示例"></a>实用示例</h4><ol><li><strong>插入网易云歌单</strong>：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% meting &quot;歌单ID&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>插入QQ音乐单曲</strong>：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% meting &quot;音乐ID&quot; &quot;tencent&quot; &quot;song&quot; %&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>搜索并播放音乐</strong>：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% meting &quot;搜索关键词&quot; &quot;netease&quot; &quot;search&quot; %&#125;<br></code></pre></td></tr></table></figure><h4 id="配置选项参考"><a href="#配置选项参考" class="headerlink" title="配置选项参考"></a>配置选项参考</h4><table><thead><tr><th>选项</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td><strong>必填</strong></td><td>歌曲ID&#x2F;歌单ID&#x2F;专辑ID&#x2F;搜索关键词</td></tr><tr><td>server</td><td><strong>必填</strong></td><td>音乐平台：<code>netease</code>(网易云), <code>tencent</code>(QQ音乐), <code>kugou</code>(酷狗), <code>xiami</code>(虾米), <code>baidu</code>(百度音乐)</td></tr><tr><td>type</td><td><strong>必填</strong></td><td>类型：<code>song</code>(单曲), <code>playlist</code>(歌单), <code>album</code>(专辑), <code>search</code>(搜索), <code>artist</code>(艺人)</td></tr></tbody></table><p>更多高级设置和选项请参考<a href="https://github.com/metowolf/MetingJS">MetingJS官方文档</a>。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>确保在发布前测试音乐播放器是否正常工作</li><li>不同音乐平台的ID获取方式可能不同</li><li>某些音乐可能因版权限制无法播放</li></ol><blockquote><p>提示：你可以通过音乐平台的网页版URL中找到音乐&#x2F;歌单的ID。</p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Hexo教程</category>
      
      <category>技术教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo插件</tag>
      
      <tag>hexo-tag-aplayer</tag>
      
      <tag>MetingJS</tag>
      
      <tag>音乐播放器</tag>
      
      <tag>网页播放器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何轻松优雅地切换 npm 源</title>
    <link href="/switch-npm-mirror-easy/"/>
    <url>/switch-npm-mirror-easy/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="如何轻松优雅地切换-npm-源，告别下载慢的烦恼！"><a href="#如何轻松优雅地切换-npm-源，告别下载慢的烦恼！" class="headerlink" title="如何轻松优雅地切换 npm 源，告别下载慢的烦恼！"></a>如何轻松优雅地切换 npm 源，告别下载慢的烦恼！</h3><p>在平时npm install的时候，如果没有一点特殊手法那很可能会出现下载失败又或者等待出奇的久。这肯定不是我们想要的结果，而时时刻刻都保证有特殊手法那又有点不太现实，在此之前我就知道可以通过</p><span id="more"></span><hr><h3 id="方法一：最直接的方式——使用-npm-config-命令"><a href="#方法一：最直接的方式——使用-npm-config-命令" class="headerlink" title="方法一：最直接的方式——使用 npm config 命令"></a>方法一：最直接的方式——使用 <code>npm config</code> 命令</h3><p>这是最基础也最快速的切换方法，无需安装额外工具。</p><h4 id="1-查看当前-npm-源"><a href="#1-查看当前-npm-源" class="headerlink" title="1. 查看当前 npm 源"></a>1. 查看当前 npm 源</h4><p>在命令行中输入以下命令，可以查看你当前 npm 正在使用的源地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p>通常情况下，你会看到默认的官方源地址。</p><h4 id="2-切换到淘宝镜像源（强烈推荐！）"><a href="#2-切换到淘宝镜像源（强烈推荐！）" class="headerlink" title="2. 切换到淘宝镜像源（强烈推荐！）"></a>2. 切换到淘宝镜像源（强烈推荐！）</h4><p>对于国内用户，**淘宝 NPM 镜像（现已迁移至 <code>npmmirror.com</code>）**是首选，它在国内的节点部署，能够提供极快的下载速度。</p><p>要切换到淘宝源，只需运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com/<br></code></pre></td></tr></table></figure><h4 id="3-切换回官方-npm-源"><a href="#3-切换回官方-npm-源" class="headerlink" title="3. 切换回官方 npm 源"></a>3. 切换回官方 npm 源</h4><p>如果你需要切换回默认的官方源，或者在特殊情况下需要访问官方源的特定包，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org/<br></code></pre></td></tr></table></figure><h4 id="4-验证是否切换成功"><a href="#4-验证是否切换成功" class="headerlink" title="4. 验证是否切换成功"></a>4. 验证是否切换成功</h4><p>无论你切换到哪个源，都可以再次运行 <code>npm config get registry</code> 命令来确认地址是否已经更新。</p><hr><h3 id="方法二：更灵活的切换工具——nrm"><a href="#方法二：更灵活的切换工具——nrm" class="headerlink" title="方法二：更灵活的切换工具——nrm"></a>方法二：更灵活的切换工具——<code>nrm</code></h3><p>如果你需要频繁地在不同 npm 源之间切换，或者需要管理多个自定义源，那么 <strong><code>nrm</code> (npm registry manager)</strong> 工具会是你的理想选择。</p><h4 id="1-全局安装-nrm"><a href="#1-全局安装-nrm" class="headerlink" title="1. 全局安装 nrm"></a>1. 全局安装 <code>nrm</code></h4><p>首先，我们需要在全局安装 <code>nrm</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g nrm<br></code></pre></td></tr></table></figure><h4 id="2-查看所有可用源"><a href="#2-查看所有可用源" class="headerlink" title="2. 查看所有可用源"></a>2. 查看所有可用源</h4><p>安装完成后，你可以使用 <code>nrm ls</code> 命令查看 <code>nrm</code> 内置的所有源列表。列表中的 <code>*</code> 符号表示当前正在使用的源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>你会看到类似这样的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">  npm -------- https://registry.npmjs.org/<br>  yarn ------- https://registry.yarnpkg.com/<br>  cnpm ------- http://r.cnpmjs.org/<br>* taobao ----- https://registry.npmmirror.com/<br>  nj --------- https://registry.nodejitsu.com/<br>  ...<br></code></pre></td></tr></table></figure><h4 id="3-轻松切换-npm-源"><a href="#3-轻松切换-npm-源" class="headerlink" title="3. 轻松切换 npm 源"></a>3. 轻松切换 npm 源</h4><p>要切换到你想要的源，只需使用 <code>nrm use &lt;源名称&gt;</code> 命令。例如，切换到淘宝源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm use taobao<br></code></pre></td></tr></table></figure><p>切换回官方源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm use npm<br></code></pre></td></tr></table></figure><h4 id="4-测试源速度（可选但实用！）"><a href="#4-测试源速度（可选但实用！）" class="headerlink" title="4. 测试源速度（可选但实用！）"></a>4. 测试源速度（可选但实用！）</h4><p><code>nrm</code> 还提供了一个非常实用的功能，可以测试各个源的响应速度，帮助你选择最快的源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><ol start="5"><li>添加和删除自定义源（高级用法）</li></ol><p>如果你有自己的私有 npm 源，或者需要添加 <code>nrm</code> 内置列表之外的源，可以使用 <code>nrm add</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm add &lt;name&gt; &lt;url&gt;<br><span class="hljs-comment"># 示例：nrm add mycompanyregistry http://my.private.registry.com</span><br></code></pre></td></tr></table></figure><p>如果不再需要某个自定义源，也可以使用 <code>nrm del</code> 命令删除它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm del &lt;name&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无论是简单地使用 <code>npm config</code> 命令，还是借助 <code>nrm</code> 工具的强大功能，<strong>切换 npm 源</strong>都能显著提升你的开发体验，让你告别漫长的等待。</p><p><strong>推荐策略：</strong></p><ul><li><strong>对于大多数国内开发者：</strong> 首次配置时使用 <code>npm config set registry https://registry.npmmirror.com/</code>，将 npm 源永久设置为淘宝镜像，通常能满足绝大部分需求。</li><li><strong>对于需要管理多个源或频繁切换的开发者：</strong> 安装并使用 <code>nrm</code> 将会极大提高你的效率。</li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>npm换原</tag>
      
      <tag>nrm</tag>
      
      <tag>淘宝镜像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用hexo-encrypt插件对Hexo博客进行加密</title>
    <link href="/hexo-encrypt-tutorial/"/>
    <url>/hexo-encrypt-tutorial/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="入个使用hexo-encrypt-插件加密Hexo博客"><a href="#入个使用hexo-encrypt-插件加密Hexo博客" class="headerlink" title="入个使用hexo-encrypt 插件加密Hexo博客"></a>入个使用hexo-encrypt 插件加密Hexo博客</h3><p>Hexo 文章加密可以帮助你保护私密内容，确保只有知道密码的用户才能访问。本文将介绍如何使用 <strong>hexo-encrypt</strong> 插件实现 Hexo 博客的文章加密。</p><span id="more"></span><hr><h4 id="1-安装-hexo-encrypt-插件"><a href="#1-安装-hexo-encrypt-插件" class="headerlink" title="1. 安装 hexo-encrypt 插件"></a>1. 安装 hexo-encrypt 插件</h4><p>首先，在你的 Hexo 博客根目录下打开终端，运行以下命令安装 <strong>hexo-encrypt</strong> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-encrypt --save<br></code></pre></td></tr></table></figure><hr><h4 id="2-配置-config-yml"><a href="#2-配置-config-yml" class="headerlink" title="2. 配置 _config.yml"></a>2. 配置 _config.yml</h4><p>安装完成后，打开你 Hexo 博客根目录下的 <code>_config.yml</code> 文件，添加或修改以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Encrypt</span><br><span class="hljs-attr">encrypt:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 启用加密功能</span><br>  <span class="hljs-attr">default_password:</span> <span class="hljs-string">your_default_password</span> <span class="hljs-comment"># 可选：设置一个默认密码，如果你不想为每篇文章单独设置密码</span><br>  <span class="hljs-attr">abstract:</span> <span class="hljs-string">这里有一些加密的内容，需要密码才能继续阅读。</span> <span class="hljs-comment"># 加密文章的摘要提示</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">嘿，这里需要密码才能访问。</span> <span class="hljs-comment"># 密码输入框上方的提示信息</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">private</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">your_tag_password</span> <span class="hljs-comment"># 该标签的密码</span><br>  <span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">哦，这是一个无效的密码，请检查并重试。</span> <span class="hljs-comment"># 密码错误提示</span><br>  <span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">哦，这些解密内容无法验证，但你仍然可以查看。</span> <span class="hljs-comment"># 哈希校验失败提示</span><br>  <span class="hljs-comment"># silent: true # 如果设置为 true，将禁用加密相关的日志输出</span><br></code></pre></td></tr></table></figure><p>请注意：</p><ul><li>将 <code>your_default_password</code> 替换为你希望设置的默认密码。如果不需要默认密码，可以删除这一行。</li><li><code>abstract</code>、<code>message</code>、<code>wrong_pass_message</code> 和 <code>wrong_hash_message</code> 都可以根据你的需求自定义。</li><li>对于 <code>tags</code> 部分，将 <code>your_tag_password</code> 替换为你希望为带有 <code>private</code> 标签的文章设置的密码。你可以根据需要添加更多标签及其对应的密码。</li></ul><hr><h4 id="3-加密文章"><a href="#3-加密文章" class="headerlink" title="3. 加密文章"></a>3. 加密文章</h4><p>你可以通过两种主要方式加密文章：为单篇文章设置密码，或利用 <code>_config.yml</code> 中的配置为多篇文章设置默认密码或基于标签的密码。</p><h5 id="方法一：为单篇文章设置密码"><a href="#方法一：为单篇文章设置密码" class="headerlink" title="方法一：为单篇文章设置密码"></a>方法一：为单篇文章设置密码</h5><p>在你的 Hexo 文章的 Markdown 文件（例如 <code>source/_posts/your-post.md</code>）的头部（Front-matter）添加 <code>password</code> 字段，并设置你的密码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 我的加密文章<br>date: 2023-10-27 10:00:00<br>tags:<br><span class="hljs-bullet">  -</span> 加密<br><span class="hljs-bullet">  -</span> 私密<br><span class="hljs-section">password: your<span class="hljs-emphasis">_article_</span>password # 这篇文章的密码</span><br><span class="hljs-section">---</span><br><br>这是这篇文章的秘密内容。只有输入正确密码才能看到。<br></code></pre></td></tr></table></figure><p>将 <code>your_article_password</code> 替换为你希望为该文章设置的密码。这种方法会覆盖 <code>_config.yml</code> 中设置的默认密码或标签密码，确保该文章只使用此特定密码。</p><h5 id="方法二：利用-config-yml-中的默认密码或标签密码"><a href="#方法二：利用-config-yml-中的默认密码或标签密码" class="headerlink" title="方法二：利用 _config.yml 中的默认密码或标签密码"></a>方法二：利用 <code>_config.yml</code> 中的默认密码或标签密码</h5><p>a. 使用默认密码：</p><p>如果你在 <code>_config.yml</code> 中设置了 default_password，并且想使用这个默认密码加密文章，那么你无需在文章的 Front-matter 中添加 password 字段。文章内容会自动应用你配置的默认密码。</p><p>b. 使用标签密码：</p><p>如果你在 <code>_config.yml</code> 的 tags 部分为某个标签（例如 private）设置了密码，那么任何带有该标签的文章都会被加密。你只需在文章的 Front-matter 中添加对应的标签即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 我的私密文章<br>date: 2023-10-27 10:00:00<br>tags:<br><span class="hljs-section">  - private # 这篇文章将使用 `<span class="hljs-emphasis">_config.yml` 中 `private` 标签对应的密码</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">这是这篇私密文章的内容。</span></span><br></code></pre></td></tr></table></figure><hr><h4 id="4-生成和部署博客"><a href="#4-生成和部署博客" class="headerlink" title="4. 生成和部署博客"></a>4. 生成和部署博客</h4><p>完成上述配置后，保存所有文件。然后，在你的 Hexo 博客根目录下运行以下命令，生成并部署你的博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>现在，当访问你加密的文章时，页面上将显示密码输入框，只有输入正确的密码才能查看文章内容。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Hexo教程</category>
      
      <category>技术教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>加密</tag>
      
      <tag>hexo-encrypt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wallhaven爬虫</title>
    <link href="/wallhaven-web-crawler-guide/"/>
    <url>/wallhaven-web-crawler-guide/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近闲得发慌，逛网页时偶然点开了一个许久没有打开过的壁纸网站。记得以前爬过它的壁纸，但代码早就不知道丢哪去了。刚好有空，又想测试下AI写代码的能力，于是就有了这段代码——全程由AI生成，我顶多算个“监工”╮(╯▽╰)╭（ps：本代码由 ai 生成）<br> <span id="more"></span></p><hr><p>亲测这代码能跑起来，就是爬取量有限╮(╯＿╰)╭，毕竟藏着些bug，例如改了 id 就爬不了了……不过也懒得改了，随手生成的东西，丢去博客备份算惹，犯不着git push 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> uniform<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> html<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-comment"># ------------------------- 配置类 -------------------------</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpiderConfig</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;爬虫基础配置&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 网络配置</span><br>        <span class="hljs-variable language_">self</span>.base_url = <span class="hljs-string">&quot;https://wallhaven.cc/search&quot;</span><br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;48868&quot;</span><br>        <span class="hljs-variable language_">self</span>.timeout = <span class="hljs-number">15</span><br>        <span class="hljs-variable language_">self</span>.retries = <span class="hljs-number">3</span><br>        <span class="hljs-variable language_">self</span>.delay = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 随机延迟范围</span><br><br>        <span class="hljs-comment"># 分页配置</span><br>        <span class="hljs-variable language_">self</span>.max_page_fallback = <span class="hljs-number">100</span>  <span class="hljs-comment"># 最大页码备用值</span><br><br>        <span class="hljs-comment"># 路径配置</span><br>        <span class="hljs-variable language_">self</span>.image_dir = <span class="hljs-string">&quot;images&quot;</span><br>        <span class="hljs-variable language_">self</span>.log_dir = <span class="hljs-string">&quot;logs&quot;</span><br>        <span class="hljs-variable language_">self</span>.log_file = <span class="hljs-string">&quot;wallhaven.log&quot;</span><br><br>        <span class="hljs-comment"># 调试模式</span><br>        <span class="hljs-variable language_">self</span>.debug_mode = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImprovedSpiderConfig</span>(<span class="hljs-title class_ inherited__">SpiderConfig</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;增强配置&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.max_threads = <span class="hljs-number">3</span><br>        <span class="hljs-variable language_">self</span>.proxy = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># ------------------------- 日志配置 -------------------------</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnicodeSafeStreamHandler</span>(logging.StreamHandler):<br>    <span class="hljs-string">&quot;&quot;&quot;安全处理控制台编码&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">emit</span>(<span class="hljs-params">self, record</span>):<br>        <span class="hljs-keyword">try</span>:<br>            msg = <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">format</span>(record)<br>            stream = <span class="hljs-variable language_">self</span>.stream<br>            encoding = stream.encoding <span class="hljs-keyword">if</span> stream.encoding <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;utf-8&#x27;</span><br>            msg = msg.encode(encoding, errors=<span class="hljs-string">&#x27;replace&#x27;</span>).decode(encoding)<br>            stream.write(msg + <span class="hljs-variable language_">self</span>.terminator)<br>            <span class="hljs-variable language_">self</span>.flush()<br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-variable language_">self</span>.handleError(record)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_logging</span>(<span class="hljs-params">config: ImprovedSpiderConfig</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;初始化安全的日志系统&quot;&quot;&quot;</span><br>    log_format = <span class="hljs-string">&#x27;%(asctime)s - [%(levelname)s] %(message)s&#x27;</span><br>    date_format = <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span><br><br>    os.makedirs(config.log_dir, exist_ok=<span class="hljs-literal">True</span>)<br><br>    logger = logging.getLogger()<br>    logger.handlers.clear()<br><br>    <span class="hljs-comment"># 文件处理器（UTF-8编码）</span><br>    file_handler = logging.FileHandler(<br>        filename=os.path.join(config.log_dir, config.log_file),<br>        encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span><br>    )<br>    file_handler.setFormatter(logging.Formatter(log_format, date_format))<br><br>    <span class="hljs-comment"># 控制台处理器（编码安全）</span><br>    console_handler = UnicodeSafeStreamHandler()<br>    console_handler.setFormatter(logging.Formatter(log_format, date_format))<br><br>    log_level = logging.DEBUG <span class="hljs-keyword">if</span> config.debug_mode <span class="hljs-keyword">else</span> logging.INFO<br>    logger.setLevel(log_level)<br>    file_handler.setLevel(log_level)<br>    console_handler.setLevel(log_level)<br><br>    logger.addHandler(file_handler)<br>    logger.addHandler(console_handler)<br><br><span class="hljs-comment"># ------------------------- 日志符号 -------------------------</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogMark</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;安全日志标识符号&quot;&quot;&quot;</span><br>    START = <span class="hljs-string">&quot;=== START ===&quot;</span><br>    END = <span class="hljs-string">&quot;=== END ===&quot;</span><br>    PROCESS_PAGE = <span class="hljs-string">&quot;[PROCESS PAGE]&quot;</span><br>    FOUND_ITEMS = <span class="hljs-string">&quot;[FOUND ITEMS]&quot;</span><br>    DOWNLOAD_START = <span class="hljs-string">&quot;[DOWNLOAD]&quot;</span><br>    DOWNLOAD_SKIP = <span class="hljs-string">&quot;[SKIP]&quot;</span><br>    DOWNLOAD_SUCCESS = <span class="hljs-string">&quot;[SUCCESS]&quot;</span><br>    DOWNLOAD_FAIL = <span class="hljs-string">&quot;[FAIL]&quot;</span><br><br><span class="hljs-comment"># ------------------------- 核心爬虫 -------------------------</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WallHavenSpider</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: ImprovedSpiderConfig</span>):<br>        <span class="hljs-variable language_">self</span>.config = config<br>        <span class="hljs-variable language_">self</span>.session = requests.Session()<br>        <span class="hljs-variable language_">self</span>.session.headers.update(&#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36&#x27;</span>,<br>            <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://wallhaven.cc/&#x27;</span><br>        &#125;)<br>        os.makedirs(<span class="hljs-variable language_">self</span>.config.image_dir, exist_ok=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_random_delay</span>(<span class="hljs-params">self</span>):<br>        sleep(uniform(*<span class="hljs-variable language_">self</span>.config.delay))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_request_with_retry</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Optional</span>[html.HtmlElement]:<br>        <span class="hljs-keyword">for</span> attempt <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.config.retries + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">try</span>:<br>                response = <span class="hljs-variable language_">self</span>.session.get(url, timeout=<span class="hljs-variable language_">self</span>.config.timeout)<br>                response.raise_for_status()<br>                tree = html.fromstring(response.content)<br><br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.config.debug_mode:<br>                    logging.debug(<span class="hljs-string">f&quot;HTML Preview:\n<span class="hljs-subst">&#123;response.text[:<span class="hljs-number">200</span>]&#125;</span>...&quot;</span>)<br>                    logging.debug(<span class="hljs-string">f&quot;Nodes found: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(tree.xpath(<span class="hljs-string">&#x27;//*&#x27;</span>))&#125;</span>&quot;</span>)<br><br>                <span class="hljs-keyword">if</span> tree <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(tree) == <span class="hljs-number">0</span>:<br>                    logging.warning(<span class="hljs-string">f&quot;Empty document: <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">return</span> tree<br><br>            <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>                logging.warning(<span class="hljs-string">f&quot;Request failed (<span class="hljs-subst">&#123;e.__class__.__name__&#125;</span>): <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">if</span> attempt == <span class="hljs-variable language_">self</span>.config.retries:<br>                    logging.error(<span class="hljs-string">f&quot;Max retries reached: <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>                <span class="hljs-variable language_">self</span>._random_delay()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_max_page</span>(<span class="hljs-params">self, tree: html.HtmlElement</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">try</span>:<br>            pagination = tree.xpath(<span class="hljs-string">&#x27;//nav[contains(@class, &quot;pagination&quot;)]&#x27;</span>)<br>            <span class="hljs-keyword">if</span> pagination:<br>                page_buttons = pagination[<span class="hljs-number">0</span>].xpath(<span class="hljs-string">&#x27;.//a[contains(@class, &quot;pagination-link&quot;)]/text()&#x27;</span>)<br>                numeric_pages = [<span class="hljs-built_in">int</span>(p.strip()) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> page_buttons <span class="hljs-keyword">if</span> p.strip().isdigit()]<br><br>                <span class="hljs-keyword">if</span> numeric_pages:<br>                    logging.debug(<span class="hljs-string">f&quot;Numeric pages found: <span class="hljs-subst">&#123;numeric_pages&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(numeric_pages)<br><br>                last_button = pagination[<span class="hljs-number">0</span>].xpath(<span class="hljs-string">&#x27;.//a[contains(@class, &quot;pagination-link&quot;)][last()]&#x27;</span>)<br>                <span class="hljs-keyword">if</span> last_button <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;href&#x27;</span> <span class="hljs-keyword">in</span> last_button[<span class="hljs-number">0</span>].attrib:<br>                    last_page_url = last_button[<span class="hljs-number">0</span>].attrib[<span class="hljs-string">&#x27;href&#x27;</span>]<br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;page=&#x27;</span> <span class="hljs-keyword">in</span> last_page_url:<br>                        page_num = last_page_url.split(<span class="hljs-string">&#x27;page=&#x27;</span>)[-<span class="hljs-number">1</span>]<br>                        <span class="hljs-keyword">if</span> page_num.isdigit():<br>                            logging.debug(<span class="hljs-string">f&quot;Page from URL: <span class="hljs-subst">&#123;page_num&#125;</span>&quot;</span>)<br>                            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(page_num)<br><br>            header = tree.xpath(<span class="hljs-string">&#x27;//header[h2[@class=&quot;section-header&quot;]]/h2/text()&#x27;</span>)<br>            <span class="hljs-keyword">if</span> header:<br>                parts = header[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;of&#x27;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts) &gt; <span class="hljs-number">1</span>:<br>                    total = parts[-<span class="hljs-number">1</span>].strip()<br>                    <span class="hljs-keyword">if</span> total.isdigit():<br>                        logging.debug(<span class="hljs-string">f&quot;Total items: <span class="hljs-subst">&#123;total&#125;</span>&quot;</span>)<br>                        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(total) - <span class="hljs-number">1</span>) // <span class="hljs-number">24</span> + <span class="hljs-number">1</span><br><br>            logging.warning(<span class="hljs-string">&quot;Using fallback page strategy&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.config.max_page_fallback<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logging.error(<span class="hljs-string">f&quot;Page parse error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, exc_info=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.config.max_page_fallback<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_detail_urls</span>(<span class="hljs-params">self, tree: html.HtmlElement</span>) -&gt; <span class="hljs-built_in">list</span>:<br>        urls = tree.xpath(<span class="hljs-string">&#x27;//section[contains(@class, &quot;thumb-listing-page&quot;)]//a[contains(@class, &quot;preview&quot;)]/@href&#x27;</span>)<br>        logging.debug(<span class="hljs-string">f&quot;Detail URLs found: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(urls)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> urls<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_image_url</span>(<span class="hljs-params">self, tree: html.HtmlElement</span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]:<br>        url = tree.xpath(<span class="hljs-string">&#x27;//img[@id=&quot;wallpaper&quot;]/@src&#x27;</span>)<br>        <span class="hljs-keyword">if</span> url:<br>            logging.debug(<span class="hljs-string">f&quot;Image URL found: <span class="hljs-subst">&#123;url[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> url[<span class="hljs-number">0</span>]<br>        logging.warning(<span class="hljs-string">&quot;Image URL not found&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_download_image</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            filename = os.path.basename(url.split(<span class="hljs-string">&#x27;?&#x27;</span>)[<span class="hljs-number">0</span>])<br>            save_path = os.path.join(<span class="hljs-variable language_">self</span>.config.image_dir, filename)<br><br>            <span class="hljs-keyword">if</span> os.path.exists(save_path):<br>                logging.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;LogMark.DOWNLOAD_SKIP&#125;</span> <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span><br><br>            logging.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;LogMark.DOWNLOAD_START&#125;</span> <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)<br><br>            <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.session.get(url, stream=<span class="hljs-literal">True</span>, timeout=<span class="hljs-variable language_">self</span>.config.timeout) <span class="hljs-keyword">as</span> response:<br>                response.raise_for_status()<br><br>                file_size = <span class="hljs-built_in">int</span>(response.headers.get(<span class="hljs-string">&#x27;Content-Length&#x27;</span>, <span class="hljs-number">0</span>))<br>                progress = <span class="hljs-number">0</span><br><br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(save_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response.iter_content(chunk_size=<span class="hljs-number">8192</span>):<br>                        <span class="hljs-keyword">if</span> chunk:<br>                            f.write(chunk)<br>                            progress += <span class="hljs-built_in">len</span>(chunk)<br>                            <span class="hljs-keyword">if</span> file_size &gt; <span class="hljs-number">0</span>:<br>                                logging.debug(<span class="hljs-string">f&quot;Progress: <span class="hljs-subst">&#123;progress&#125;</span>/<span class="hljs-subst">&#123;file_size&#125;</span> (<span class="hljs-subst">&#123;progress/file_size:<span class="hljs-number">.1</span>%&#125;</span>)&quot;</span>)<br><br>                logging.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;LogMark.DOWNLOAD_SUCCESS&#125;</span> <span class="hljs-subst">&#123;filename&#125;</span> (<span class="hljs-subst">&#123;progress/<span class="hljs-number">1024</span>:<span class="hljs-number">.1</span>f&#125;</span>KB)&quot;</span>)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logging.error(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;LogMark.DOWNLOAD_FAIL&#125;</span> <span class="hljs-subst">&#123;url&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        logging.info(LogMark.START)<br><br>        base_url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.config.base_url&#125;</span>?q=id:<span class="hljs-subst">&#123;self.config.<span class="hljs-built_in">id</span>&#125;</span>&quot;</span><br>        logging.debug(<span class="hljs-string">f&quot;Base URL: <span class="hljs-subst">&#123;base_url&#125;</span>&quot;</span>)<br><br>        initial_tree = <span class="hljs-variable language_">self</span>._request_with_retry(base_url)<br>        <span class="hljs-keyword">if</span> initial_tree <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            logging.error(<span class="hljs-string">&quot;Initial request failed&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        max_page = <span class="hljs-variable language_">self</span>._get_max_page(initial_tree)<br>        logging.debug(<span class="hljs-string">f&quot;Max pages calculated: <span class="hljs-subst">&#123;max_page&#125;</span>&quot;</span>)<br><br>        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, max_page + <span class="hljs-number">1</span>):<br>            page_url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;base_url&#125;</span>&amp;page=<span class="hljs-subst">&#123;page&#125;</span>&quot;</span> <span class="hljs-keyword">if</span> page &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> base_url<br>            logging.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;LogMark.PROCESS_PAGE&#125;</span> <span class="hljs-subst">&#123;page&#125;</span>: <span class="hljs-subst">&#123;page_url&#125;</span>&quot;</span>)<br><br>            tree = <span class="hljs-variable language_">self</span>._request_with_retry(page_url)<br>            <span class="hljs-keyword">if</span> tree <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                logging.warning(<span class="hljs-string">f&quot;Skip invalid page: <span class="hljs-subst">&#123;page&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            detail_urls = <span class="hljs-variable language_">self</span>._get_detail_urls(tree)<br>            logging.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;LogMark.FOUND_ITEMS&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(detail_urls)&#125;</span>&quot;</span>)<br><br>            <span class="hljs-keyword">for</span> idx, url <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(detail_urls, <span class="hljs-number">1</span>):<br>                <span class="hljs-variable language_">self</span>._random_delay()<br>                logging.debug(<span class="hljs-string">f&quot;Processing <span class="hljs-subst">&#123;idx&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(detail_urls)&#125;</span>: <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>                detail_tree = <span class="hljs-variable language_">self</span>._request_with_retry(url)<br><br>                <span class="hljs-keyword">if</span> detail_tree:<br>                    <span class="hljs-keyword">if</span> image_url := <span class="hljs-variable language_">self</span>._get_image_url(detail_tree):<br>                        <span class="hljs-variable language_">self</span>._download_image(image_url)<br>                <span class="hljs-keyword">else</span>:<br>                    logging.warning(<span class="hljs-string">f&quot;Invalid detail page: <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br><br>        logging.info(LogMark.END)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 初始化配置</span><br>    config = ImprovedSpiderConfig()<br>    config.<span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;48868&quot;</span><br>    config.delay = (<span class="hljs-number">0.5</span>, <span class="hljs-number">1.2</span>)<br>    config.debug_mode = <span class="hljs-literal">False</span><br>    config.max_page_fallback = <span class="hljs-number">6</span><br><br>    <span class="hljs-comment"># 配置日志系统</span><br>    setup_logging(config)<br><br>    <span class="hljs-comment"># 运行爬虫</span><br>    spider = WallHavenSpider(config)<br>    spider.run()<br><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
      <tag>wallhaven</tag>
      
      <tag>壁纸爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Termux安装ssh和设置sshd自启</title>
    <link href="/termux-sshd-auto-start-guide/"/>
    <url>/termux-sshd-auto-start-guide/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近手机重置了，Termux 也得重新装，所有配置都得从头弄。说实话，在 Termux 客户端里用微信输入法敲命令确实别扭，我还是习惯用 JuiceSSH 来连——它会调起密码键盘，输命令顺畅多了。</p><p>索性写篇文章当备忘录，主要是不想下次重装或者在其他设备上配置时，又得四处找教程。统一存在这里，到时候直接上来 copy 步骤就行</p><span id="more"></span><hr><p>在 Termux 中安装并启用 OpenSSH 服务，可以方便地在其他设备上远程连接并进行操作。以下是详细步骤：</p><h3 id="安装-SSH-和远程登录"><a href="#安装-SSH-和远程登录" class="headerlink" title="安装 SSH 和远程登录"></a>安装 SSH 和远程登录</h3><h4 id="1-安装-OpenSSH"><a href="#1-安装-OpenSSH" class="headerlink" title="1. 安装 OpenSSH"></a>1. 安装 OpenSSH</h4><p>执行以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pkg install openssh -y<br></code></pre></td></tr></table></figure><h4 id="2-查询用户名"><a href="#2-查询用户名" class="headerlink" title="2. 查询用户名"></a>2. 查询用户名</h4><p>获取用于 SSH 登录的用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p><strong>输出示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">u0_a123<br></code></pre></td></tr></table></figure><h4 id="3-设置登录密码"><a href="#3-设置登录密码" class="headerlink" title="3. 设置登录密码"></a>3. 设置登录密码</h4><p>为当前用户设置 SSH 登录密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 需要输入两次密码（设置和确认），两次输入必须一致。</p></blockquote><p><strong>输出示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">New password: <br>Retype new password: <br>New password was successfully <span class="hljs-built_in">set</span>.<br></code></pre></td></tr></table></figure><h4 id="4-启动-SSH-服务"><a href="#4-启动-SSH-服务" class="headerlink" title="4. 启动 SSH 服务"></a>4. 启动 SSH 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sshd<br></code></pre></td></tr></table></figure><h4 id="5-远程连接"><a href="#5-远程连接" class="headerlink" title="5. 远程连接"></a>5. 远程连接</h4><p>确保远程设备与手机<strong>处于同一局域网且网络互通</strong>，在远程设备上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh [你的用户名]@[手机IP地址] -p 8022<br></code></pre></td></tr></table></figure><blockquote><p>输入步骤 3 设置的密码即可成功连接。</p></blockquote><p><strong>连接成功示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh u0_a123@192.168.1.100 -p 8022<br>u0_a123@192.168.1.100<span class="hljs-string">&#x27;s password: </span><br><span class="hljs-string">Welcome to Termux!</span><br><span class="hljs-string">$</span><br></code></pre></td></tr></table></figure><hr><h3 id="设置-Termux-启动时自动运行-SSH"><a href="#设置-Termux-启动时自动运行-SSH" class="headerlink" title="设置 Termux 启动时自动运行 SSH"></a>设置 Termux 启动时自动运行 SSH</h3><h4 id="1-创建状态检查脚本"><a href="#1-创建状态检查脚本" class="headerlink" title="1. 创建状态检查脚本"></a>1. 创建状态检查脚本</h4><p>创建并编辑脚本文件<code>.start_sshd.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.start_sshd.sh<br></code></pre></td></tr></table></figure><p>粘贴以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 显示SSH连接信息</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;═══════════════════════════════════════&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;用户: <span class="hljs-subst">$(whoami)</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SSH端口: 8022&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;═══════════════════════════════════════&quot;</span><br><br><span class="hljs-comment"># 检查SSHD状态</span><br><span class="hljs-function"><span class="hljs-title">check_sshd</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> pgrep -x <span class="hljs-string">&quot;sshd&quot;</span> &gt;/dev/null; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;🔵 sshd状态: \033[32m运行中 (PID: <span class="hljs-subst">$(pgrep -x <span class="hljs-string">&quot;sshd&quot;</span>)</span>)\033[0m&quot;</span><br>        <span class="hljs-built_in">return</span> 0<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;🟡 sshd状态: \033[33m未运行\033[0m&quot;</span><br>        <span class="hljs-built_in">return</span> 1<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 主逻辑</span><br><span class="hljs-keyword">if</span> ! check_sshd; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;▶ 尝试启动sshd...&quot;</span><br>    <span class="hljs-keyword">if</span> sshd &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">sleep</span> 1 <span class="hljs-comment"># 等待进程启动</span><br>        <span class="hljs-keyword">if</span> check_sshd; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m 成功\033[0m&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m 失败 (可能端口冲突或权限问题)\033[0m&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m 启动命令执行失败\033[0m&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>保存退出 (<code>Ctrl+O</code> → <code>回车</code> → <code>Ctrl+X</code>)，并赋予执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ~/.start_sshd.sh<br></code></pre></td></tr></table></figure><h4 id="2-配置开机自启"><a href="#2-配置开机自启" class="headerlink" title="2. 配置开机自启"></a>2. 配置开机自启</h4><p>编辑 Termux 的启动配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.bashrc<br></code></pre></td></tr></table></figure><p>在文件末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动时自动检查/运行SSHD</span><br>~/.start_sshd.sh<br></code></pre></td></tr></table></figure><p>保存退出，并赋予执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ~/.bashrc<br></code></pre></td></tr></table></figure><h4 id="3-验证效果"><a href="#3-验证效果" class="headerlink" title="3. 验证效果"></a>3. 验证效果</h4><p>重启 Termux 应用后，系统将自动执行脚本，检查并启动 SSH 服务。</p><p><strong>启动后输出示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">═══════════════════════════════════════<br>用户: u0_a123<br>SSH端口: 8022<br>═══════════════════════════════════════<br>🟡 sshd状态: 未运行<br>▶ 尝试启动sshd... 成功<br>🔵 sshd状态: 运行中 (PID: 12345)<br></code></pre></td></tr></table></figure><p><strong>当SSH已运行时输出示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">═══════════════════════════════════════<br>用户: u0_a123<br>SSH端口: 8022<br>═══════════════════════════════════════<br>🔵 sshd状态: 运行中 (PID: 12345)<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Termux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Termux</tag>
      
      <tag>SSH配置</tag>
      
      <tag>OpenSSH</tag>
      
      <tag>远程连接</tag>
      
      <tag>Linux工具</tag>
      
      <tag>终端技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『逃离办公室の25春』📸</title>
    <link href="/escape-office-spring2025-photo/"/>
    <url>/escape-office-spring2025-photo/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哦，这是一个无效的密码，请检查并重试。" data-whm="哦，这些解密内容无法验证，但你仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="c2bad21ab59993260855b0a498ed8b50a56f5382e5b9a2d3ce29a81ff2ec2f0e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嘿，这里需要密码才能访问。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
      <tag>出行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
